// Generated by gencpp from file smarthome/ExecuteRequest.msg
// DO NOT EDIT!


#ifndef SMARTHOME_MESSAGE_EXECUTEREQUEST_H
#define SMARTHOME_MESSAGE_EXECUTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smarthome
{
template <class ContainerAllocator>
struct ExecuteRequest_
{
  typedef ExecuteRequest_<ContainerAllocator> Type;

  ExecuteRequest_()
    : command()
    , param_names()
    , param_values()  {
    }
  ExecuteRequest_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , param_names(_alloc)
    , param_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param_names_type;
  _param_names_type param_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _param_values_type;
  _param_values_type param_values;





  typedef boost::shared_ptr< ::smarthome::ExecuteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarthome::ExecuteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteRequest_

typedef ::smarthome::ExecuteRequest_<std::allocator<void> > ExecuteRequest;

typedef boost::shared_ptr< ::smarthome::ExecuteRequest > ExecuteRequestPtr;
typedef boost::shared_ptr< ::smarthome::ExecuteRequest const> ExecuteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarthome::ExecuteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarthome::ExecuteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarthome::ExecuteRequest_<ContainerAllocator1> & lhs, const ::smarthome::ExecuteRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.param_names == rhs.param_names &&
    lhs.param_values == rhs.param_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarthome::ExecuteRequest_<ContainerAllocator1> & lhs, const ::smarthome::ExecuteRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarthome

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarthome::ExecuteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarthome::ExecuteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::ExecuteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::ExecuteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::ExecuteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::ExecuteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarthome::ExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "745d1ced82e6d6a80c62aee11cf30f63";
  }

  static const char* value(const ::smarthome::ExecuteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x745d1ced82e6d6a8ULL;
  static const uint64_t static_value2 = 0x0c62aee11cf30f63ULL;
};

template<class ContainerAllocator>
struct DataType< ::smarthome::ExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarthome/ExecuteRequest";
  }

  static const char* value(const ::smarthome::ExecuteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarthome::ExecuteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string command\n"
"string[] param_names\n"
"string[] param_values\n"
;
  }

  static const char* value(const ::smarthome::ExecuteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarthome::ExecuteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.param_names);
      stream.next(m.param_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarthome::ExecuteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarthome::ExecuteRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "param_names[]" << std::endl;
    for (size_t i = 0; i < v.param_names.size(); ++i)
    {
      s << indent << "  param_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param_names[i]);
    }
    s << indent << "param_values[]" << std::endl;
    for (size_t i = 0; i < v.param_values.size(); ++i)
    {
      s << indent << "  param_values[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTHOME_MESSAGE_EXECUTEREQUEST_H
