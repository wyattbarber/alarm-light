// Generated by gencpp from file smarthome/Device.msg
// DO NOT EDIT!


#ifndef SMARTHOME_MESSAGE_DEVICE_H
#define SMARTHOME_MESSAGE_DEVICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smarthome
{
template <class ContainerAllocator>
struct Device_
{
  typedef Device_<ContainerAllocator> Type;

  Device_()
    : id()
    , type()
    , traits()
    , name()
    , nicknames()
    , default_names()
    , will_report_state(false)
    , room_hint()
    , manufacturer()
    , model()
    , sw_version()
    , hw_version()
    , device_id()  {
    }
  Device_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , type(_alloc)
    , traits(_alloc)
    , name(_alloc)
    , nicknames(_alloc)
    , default_names(_alloc)
    , will_report_state(false)
    , room_hint(_alloc)
    , manufacturer(_alloc)
    , model(_alloc)
    , sw_version(_alloc)
    , hw_version(_alloc)
    , device_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _traits_type;
  _traits_type traits;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _nicknames_type;
  _nicknames_type nicknames;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _default_names_type;
  _default_names_type default_names;

   typedef uint8_t _will_report_state_type;
  _will_report_state_type will_report_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _room_hint_type;
  _room_hint_type room_hint;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _manufacturer_type;
  _manufacturer_type manufacturer;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_type;
  _model_type model;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sw_version_type;
  _sw_version_type sw_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hw_version_type;
  _hw_version_type hw_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _device_id_type;
  _device_id_type device_id;





  typedef boost::shared_ptr< ::smarthome::Device_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarthome::Device_<ContainerAllocator> const> ConstPtr;

}; // struct Device_

typedef ::smarthome::Device_<std::allocator<void> > Device;

typedef boost::shared_ptr< ::smarthome::Device > DevicePtr;
typedef boost::shared_ptr< ::smarthome::Device const> DeviceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarthome::Device_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarthome::Device_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarthome::Device_<ContainerAllocator1> & lhs, const ::smarthome::Device_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.traits == rhs.traits &&
    lhs.name == rhs.name &&
    lhs.nicknames == rhs.nicknames &&
    lhs.default_names == rhs.default_names &&
    lhs.will_report_state == rhs.will_report_state &&
    lhs.room_hint == rhs.room_hint &&
    lhs.manufacturer == rhs.manufacturer &&
    lhs.model == rhs.model &&
    lhs.sw_version == rhs.sw_version &&
    lhs.hw_version == rhs.hw_version &&
    lhs.device_id == rhs.device_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarthome::Device_<ContainerAllocator1> & lhs, const ::smarthome::Device_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarthome

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarthome::Device_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarthome::Device_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::Device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::Device_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::Device_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::Device_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarthome::Device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c77f75935943e7d9468448c8808d83cc";
  }

  static const char* value(const ::smarthome::Device_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc77f75935943e7d9ULL;
  static const uint64_t static_value2 = 0x468448c8808d83ccULL;
};

template<class ContainerAllocator>
struct DataType< ::smarthome::Device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarthome/Device";
  }

  static const char* value(const ::smarthome::Device_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarthome::Device_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# See https://developers.google.com/assistant/smarthome/reference/intent/sync\n"
"#   for details of all fields\n"
"\n"
"# Device ID and capabilities\n"
"string id\n"
"string type\n"
"string[] traits\n"
"\n"
"# Device names\n"
"string name\n"
"string[] nicknames\n"
"string[] default_names\n"
"\n"
"# Status reporting info\n"
"bool will_report_state\n"
"string room_hint\n"
"\n"
"# Make and manufacture\n"
"string manufacturer\n"
"string model\n"
"string sw_version\n"
"string hw_version\n"
"\n"
"# Alternate, local device ID\n"
"string device_id\n"
"\n"
;
  }

  static const char* value(const ::smarthome::Device_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarthome::Device_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.traits);
      stream.next(m.name);
      stream.next(m.nicknames);
      stream.next(m.default_names);
      stream.next(m.will_report_state);
      stream.next(m.room_hint);
      stream.next(m.manufacturer);
      stream.next(m.model);
      stream.next(m.sw_version);
      stream.next(m.hw_version);
      stream.next(m.device_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Device_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarthome::Device_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarthome::Device_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "traits[]" << std::endl;
    for (size_t i = 0; i < v.traits.size(); ++i)
    {
      s << indent << "  traits[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.traits[i]);
    }
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "nicknames[]" << std::endl;
    for (size_t i = 0; i < v.nicknames.size(); ++i)
    {
      s << indent << "  nicknames[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.nicknames[i]);
    }
    s << indent << "default_names[]" << std::endl;
    for (size_t i = 0; i < v.default_names.size(); ++i)
    {
      s << indent << "  default_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.default_names[i]);
    }
    s << indent << "will_report_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.will_report_state);
    s << indent << "room_hint: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.room_hint);
    s << indent << "manufacturer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.manufacturer);
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model);
    s << indent << "sw_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sw_version);
    s << indent << "hw_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hw_version);
    s << indent << "device_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.device_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTHOME_MESSAGE_DEVICE_H
