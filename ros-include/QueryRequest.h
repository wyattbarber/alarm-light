// Generated by gencpp from file smarthome/QueryRequest.msg
// DO NOT EDIT!


#ifndef SMARTHOME_MESSAGE_QUERYREQUEST_H
#define SMARTHOME_MESSAGE_QUERYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace smarthome
{
template <class ContainerAllocator>
struct QueryRequest_
{
  typedef QueryRequest_<ContainerAllocator> Type;

  QueryRequest_()
    : key()  {
    }
  QueryRequest_(const ContainerAllocator& _alloc)
    : key(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_type;
  _key_type key;





  typedef boost::shared_ptr< ::smarthome::QueryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarthome::QueryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct QueryRequest_

typedef ::smarthome::QueryRequest_<std::allocator<void> > QueryRequest;

typedef boost::shared_ptr< ::smarthome::QueryRequest > QueryRequestPtr;
typedef boost::shared_ptr< ::smarthome::QueryRequest const> QueryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarthome::QueryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarthome::QueryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarthome::QueryRequest_<ContainerAllocator1> & lhs, const ::smarthome::QueryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.key == rhs.key;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarthome::QueryRequest_<ContainerAllocator1> & lhs, const ::smarthome::QueryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarthome

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarthome::QueryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarthome::QueryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::QueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::QueryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::QueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::QueryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarthome::QueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0e6b82860d1fefbdaa2c52c0b6f712e";
  }

  static const char* value(const ::smarthome::QueryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0e6b82860d1fefbULL;
  static const uint64_t static_value2 = 0xdaa2c52c0b6f712eULL;
};

template<class ContainerAllocator>
struct DataType< ::smarthome::QueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarthome/QueryRequest";
  }

  static const char* value(const ::smarthome::QueryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarthome::QueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string key\n"
;
  }

  static const char* value(const ::smarthome::QueryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarthome::QueryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.key);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarthome::QueryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarthome::QueryRequest_<ContainerAllocator>& v)
  {
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTHOME_MESSAGE_QUERYREQUEST_H
