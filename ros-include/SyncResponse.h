// Generated by gencpp from file smarthome/SyncResponse.msg
// DO NOT EDIT!


#ifndef SMARTHOME_MESSAGE_SYNCRESPONSE_H
#define SMARTHOME_MESSAGE_SYNCRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smarthome/Device.h>

namespace smarthome
{
template <class ContainerAllocator>
struct SyncResponse_
{
  typedef SyncResponse_<ContainerAllocator> Type;

  SyncResponse_()
    : devices()  {
    }
  SyncResponse_(const ContainerAllocator& _alloc)
    : devices(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::smarthome::Device_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::smarthome::Device_<ContainerAllocator> >::other >  _devices_type;
  _devices_type devices;





  typedef boost::shared_ptr< ::smarthome::SyncResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smarthome::SyncResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SyncResponse_

typedef ::smarthome::SyncResponse_<std::allocator<void> > SyncResponse;

typedef boost::shared_ptr< ::smarthome::SyncResponse > SyncResponsePtr;
typedef boost::shared_ptr< ::smarthome::SyncResponse const> SyncResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smarthome::SyncResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smarthome::SyncResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smarthome::SyncResponse_<ContainerAllocator1> & lhs, const ::smarthome::SyncResponse_<ContainerAllocator2> & rhs)
{
  return lhs.devices == rhs.devices;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smarthome::SyncResponse_<ContainerAllocator1> & lhs, const ::smarthome::SyncResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smarthome

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smarthome::SyncResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smarthome::SyncResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::SyncResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smarthome::SyncResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::SyncResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smarthome::SyncResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smarthome::SyncResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a58af557a0e9385ca7356e781359f650";
  }

  static const char* value(const ::smarthome::SyncResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa58af557a0e9385cULL;
  static const uint64_t static_value2 = 0xa7356e781359f650ULL;
};

template<class ContainerAllocator>
struct DataType< ::smarthome::SyncResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smarthome/SyncResponse";
  }

  static const char* value(const ::smarthome::SyncResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smarthome::SyncResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Device[] devices\n"
"\n"
"================================================================================\n"
"MSG: smarthome/Device\n"
"# See https://developers.google.com/assistant/smarthome/reference/intent/sync\n"
"#   for details of all fields\n"
"\n"
"# Device ID and capabilities\n"
"string id\n"
"string type\n"
"string[] traits\n"
"\n"
"# Device names\n"
"string name\n"
"string[] nicknames\n"
"string[] default_names\n"
"\n"
"# Status reporting info\n"
"bool will_report_state\n"
"string room_hint\n"
"\n"
"# Make and manufacture\n"
"string manufacturer\n"
"string model\n"
"string sw_version\n"
"string hw_version\n"
"\n"
"# Alternate, local device ID\n"
"string device_id\n"
"\n"
;
  }

  static const char* value(const ::smarthome::SyncResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smarthome::SyncResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.devices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SyncResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smarthome::SyncResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smarthome::SyncResponse_<ContainerAllocator>& v)
  {
    s << indent << "devices[]" << std::endl;
    for (size_t i = 0; i < v.devices.size(); ++i)
    {
      s << indent << "  devices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::smarthome::Device_<ContainerAllocator> >::stream(s, indent + "    ", v.devices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMARTHOME_MESSAGE_SYNCRESPONSE_H
